package io.snyk.plugin.ui.toolwindow

import com.intellij.ui.components.labels.LinkLabel
import com.intellij.uiDesigner.core.GridConstraints
import com.intellij.uiDesigner.core.GridLayoutManager
import com.intellij.uiDesigner.core.Spacer
import icons.SnykIcons
import io.snyk.plugin.ui.addRowOfItemsToPanel
import io.snyk.plugin.ui.baseGridConstraintsAnchorWest
import io.snyk.plugin.ui.buildBoldTitleLabel
import io.snyk.plugin.ui.buildTwoLabelsPanel
import io.snyk.plugin.ui.descriptionHeaderPanel
import io.snyk.plugin.ui.getReadOnlyClickableHtmlJEditorPane
import io.snyk.plugin.ui.panelGridConstraints
import org.commonmark.parser.Parser
import org.commonmark.renderer.html.HtmlRenderer
import snyk.oss.Vulnerability
import java.awt.Font
import java.awt.Insets
import javax.swing.JLabel
import javax.swing.JPanel

class VulnerabilityDescriptionPanel(private val groupedVulns: Collection<Vulnerability>) : JPanel() {

    private val labelProvider: LabelProvider = LabelProvider()
    private val vulnerability = groupedVulns.first()

    init {
        this.layout = GridLayoutManager(10, 1, Insets(20, 10, 20, 20), -1, 10)

        this.add(
            Spacer(),
            panelGridConstraints(9)
        )

        this.add(
            getMainBodyPanel(),
            baseGridConstraintsAnchorWest(1, indent = 0)
        )

        this.add(
            getDetailedPathsPanel(),
            panelGridConstraints(2)
        )

        this.add(
            getOverviewPanel(),
            panelGridConstraints(3)
        )

        this.add(
            getTitlePanel(),
            panelGridConstraints(0)
        )
    }

    private fun getMainBodyPanel(): JPanel {
        val panel = JPanel()
        panel.layout = GridLayoutManager(11, 2, Insets(20, 0, 20, 0), 50, -1)

        fun boldLabel(text: String) =
            JLabel(text).apply { font = io.snyk.plugin.ui.getFont(Font.BOLD, -1, JLabel().font) }

        panel.add(
            boldLabel("Vulnerable module:"),
            baseGridConstraintsAnchorWest(2, 0)
        )
        panel.add(
            JLabel(vulnerability.name)/*.apply { this.horizontalAlignment = SwingConstants.LEFT }*/,
            baseGridConstraintsAnchorWest(2, 1)
        )

        val introducedThroughListPanel = getIntroducedThroughListPanel()
        if (introducedThroughListPanel != null) {
            panel.add(
                boldLabel("Introduced through:"),
                baseGridConstraintsAnchorWest(3, 0)
            )
            panel.add(
                introducedThroughListPanel,
                baseGridConstraintsAnchorWest(3, 1)
            )
        }

        val fixedInText = vulnerability.fixedIn?.let {
            if (it.isNotEmpty()) {
                it.joinToString(prefix = "${vulnerability.name}@", separator = ", @")
            } else "Not fixed"
        }
        if (fixedInText != null) {
            panel.add(
                boldLabel("Fixed in:"),
                baseGridConstraintsAnchorWest(4, 0)
            )
            panel.add(
                JLabel(fixedInText),
                baseGridConstraintsAnchorWest(4, 1)
            )
        }

        val exploit = vulnerability.exploit
        if (exploit != null) {
            panel.add(
                boldLabel("Exploit maturity:"),
                baseGridConstraintsAnchorWest(5, 0)
            )
            panel.add(
                JLabel(exploit),
                baseGridConstraintsAnchorWest(5, 1)
            )
        }

        return panel
    }

    private fun getIntroducedThroughListPanel(): JPanel? {
        val intros = groupedVulns
            .mapNotNull { vulnerability ->
                vulnerability.from.let { if (it.size > 1) it[1] else null }
            }
            .distinct()

        if (intros.isEmpty()) return null

        val panel = JPanel()
        val packageManager = groupedVulns.first().packageManager

        panel.layout = GridLayoutManager(1, intros.size * 2, Insets(0, 0, 0, 0), 0, 0)

        addRowOfItemsToPanel(
            panel = panel,
            startingColumn = 0,
            items = intros.map { item -> labelProvider.getDependencyLabel(packageManager, item) },
            separator = ", ",
            firstSeparator = false,
            opaqueSeparator = false
        )
        return panel
    }

    private fun getDetailedPathsPanel(): JPanel {
        val detailsPanel = JPanel()
        detailsPanel.layout = GridLayoutManager(2, 2, Insets(0, 0, 0, 0), -1, -1)

        detailsPanel.add(
            buildBoldTitleLabel("Detailed paths"),
            baseGridConstraintsAnchorWest(
                row = 0
            )
        )

        detailsPanel.add(
            getInnerDetailedPathsPanel(3),
            baseGridConstraintsAnchorWest(
                row = 1,
                indent = 0
            )
        )

        return detailsPanel
    }

    private fun getInnerDetailedPathsPanel(itemsToShow: Int? = null): JPanel {
        val detailsPanel = JPanel()
        detailsPanel.layout = GridLayoutManager(groupedVulns.size + 2, 2, Insets(0, 0, 0, 0), -1, -1)

        groupedVulns
            .take(itemsToShow ?: groupedVulns.size)
            .forEachIndexed { index, vuln ->
                val detailPanel = JPanel()
                detailPanel.layout = GridLayoutManager(2, 2, Insets(0, 0, 0, 0), -1, 0)
                detailPanel.add(
                    buildTwoLabelsPanel("Introduced through:", vuln.from.joinToString(separator = " > ")),
                    baseGridConstraintsAnchorWest(
                        row = 0,
                        HSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK,
                        VSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK,
                        indent = 0
                    )
                )

                val remediationText = when {
                    vuln.upgradePath.isEmpty() || vuln.upgradePath.size < 2 -> "none"
                    else -> "Upgrade to " + vuln.upgradePath[1]
                }
                detailPanel.add(
                    buildTwoLabelsPanel("Remediation:", remediationText),
                    baseGridConstraintsAnchorWest(
                        row = 1,
                        indent = 0
                    )
                )

                detailsPanel.add(
                    detailPanel,
                    baseGridConstraintsAnchorWest(
                        row = index + 1
                    )
                )
            }

        if (itemsToShow != null && itemsToShow < groupedVulns.size) {
            val showMoreLabel = LinkLabel.create("...and ${groupedVulns.size - itemsToShow} more") {
                detailsPanel.removeAll()
                detailsPanel.add(
                    getInnerDetailedPathsPanel(),
                    baseGridConstraintsAnchorWest(
                        row = 0,
                        indent = 0
                    )
                )
                this.revalidate()
                this.repaint()
            }
            detailsPanel.add(
                showMoreLabel,
                baseGridConstraintsAnchorWest(groupedVulns.size + 1)
            )
        }

        return detailsPanel
    }

    private fun getTitlePanel(): JPanel {
        val titlePanel = JPanel()
        titlePanel.layout = GridLayoutManager(2, 1, Insets(0, 0, 0, 0), -1, 5)

        val titleLabel = JLabel().apply {
            font = io.snyk.plugin.ui.getFont(Font.BOLD, 20, font)
            text = " ${vulnerability.title}"
            icon = SnykIcons.getSeverityIcon(vulnerability.severity, SnykIcons.IconSize.SIZE24)
        }

        titlePanel.add(
            titleLabel,
            baseGridConstraintsAnchorWest(0)
        )

        titlePanel.add(
            cwePanel(),
            baseGridConstraintsAnchorWest(1, indent = 0)
        )

        return titlePanel
    }

    private fun cwePanel() = descriptionHeaderPanel(
        issueNaming = if (vulnerability.license == null) "Vulnerability" else "License",
        cwes = vulnerability.identifiers?.CWE ?: emptyList(),
        cves = vulnerability.identifiers?.CVE ?: emptyList(),
        cvssScore = vulnerability.cvssScore,
        cvsSv3 = vulnerability.CVSSv3,
        id = vulnerability.id
    )

    private fun getOverviewPanel(): JPanel {
        val overviewPanel = JPanel()
        overviewPanel.layout = GridLayoutManager(2, 1, Insets(0, 5, 0, 0), -1, 0)

        val descriptionPane = getReadOnlyClickableHtmlJEditorPane(getDescriptionAsHtml())

        overviewPanel.add(
            descriptionPane,
            panelGridConstraints(1)
        )
        return overviewPanel
    }

    private fun getDescriptionAsHtml(): String {
        val overviewMarkdownStr = vulnerability.description

        val parser = Parser.builder().build()
        val document = parser.parse(overviewMarkdownStr)

        val renderer = HtmlRenderer.builder().escapeHtml(true).build()

        return renderer.render(document)
    }
}
