package io.snyk.plugin.ui.toolwindow

import com.intellij.ide.BrowserUtil
import com.intellij.ui.BrowserHyperlinkListener
import com.intellij.ui.components.labels.LinkLabel
import com.intellij.uiDesigner.core.GridConstraints
import com.intellij.uiDesigner.core.GridLayoutManager
import com.intellij.uiDesigner.core.Spacer
import com.intellij.util.ui.JBHtmlEditorKit
import com.intellij.util.ui.UIUtil
import io.snyk.plugin.cli.Vulnerability
import io.snyk.plugin.ui.buildBoldTitleLabel
import io.snyk.plugin.ui.buildTwoLabelsPanel
import org.commonmark.parser.Parser
import org.commonmark.renderer.html.HtmlRenderer
import java.awt.Color
import java.awt.Dimension
import java.awt.Font
import java.awt.Insets
import javax.swing.JButton
import javax.swing.JEditorPane
import javax.swing.JLabel
import javax.swing.JPanel
import javax.swing.UIManager
import javax.swing.text.html.HTMLDocument


class VulnerabilityDescriptionPanel(private val groupedVulns: Collection<Vulnerability>) : JPanel() {

    private val vulnerability = groupedVulns.first()

    private fun baseGridConstraints(
        row: Int,
        column: Int = 0,
        rowSpan: Int = 1,
        colSpan: Int = 1,
        anchor: Int = GridConstraints.ANCHOR_WEST,
        fill: Int = GridConstraints.FILL_NONE,
        HSizePolicy: Int = GridConstraints.SIZEPOLICY_FIXED,
        VSizePolicy: Int = GridConstraints.SIZEPOLICY_FIXED,
        minimumSize: Dimension? = null,
        preferredSize: Dimension? = null,
        maximumSize: Dimension? = null,
        indent: Int = 1,
        useParentLayout: Boolean = false
    ): GridConstraints {
        return GridConstraints(
            row, column, rowSpan, colSpan, anchor, fill, HSizePolicy, VSizePolicy, minimumSize, preferredSize,
            maximumSize, indent, useParentLayout
        )
    }

    private fun panelGridConstraints(row: Int) = baseGridConstraints(
        row = row,
        anchor = GridConstraints.ANCHOR_CENTER,
        fill = GridConstraints.FILL_BOTH,
        HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
        VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
        indent = 0
    )

    init {
        this.layout = GridLayoutManager(10, 1, Insets(20, 0, 20, 20), -1, 10)

        this.add(
            Spacer(),
            panelGridConstraints(9)
        )

        this.add(
            getMainBodyPanel(),
            panelGridConstraints(1)
        )

        this.add(
            getDetailedPathsPanel(),
            panelGridConstraints(2)
        )

        this.add(
            getOverviewPanel(),
            panelGridConstraints(3)
        )

        this.add(
            getMoreInfoPanel(),
            panelGridConstraints(4)
        )

        this.add(
            getTitlePanel(),
            panelGridConstraints(0)
        )

    }

    private fun getMainBodyPanel(): JPanel {
        val panel = JPanel()
        panel.layout = GridLayoutManager(11, 1, Insets(0, 0, 0, 0), -1, -1)

        panel.add(buildTwoLabelsPanel("Vulnerable module:", vulnerability.name),
            baseGridConstraints(2)
        )

        val introducedThroughText = //vulnerability.from.joinToString()
            groupedVulns.asSequence()
                .map { it.from[1] }
                .distinct()
                .joinToString()
        panel.add(buildTwoLabelsPanel("Introduced through:", introducedThroughText),
            baseGridConstraints(3)
        )

        panel.add(buildTwoLabelsPanel("Exploit maturity:", vulnerability.exploit),
            baseGridConstraints(4)
        )

        panel.add(
            buildTwoLabelsPanel(
                "Fixed in:",
                vulnerability.fixedIn.joinToString(prefix = "${vulnerability.name}@", separator = ", @")),
            baseGridConstraints(5)
        )

        val fixPanel = JPanel()
        fixPanel.isVisible = false
        fixPanel.layout = GridLayoutManager(1, 2, Insets(0, 0, 0, 0), -1, -1)

        panel.add(fixPanel,
            baseGridConstraints(
                6,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_BOTH,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW
            )
        )

        val fixIssueButton = JButton()
        fixIssueButton.text = "Fix this vulnerability"

        fixPanel.add(fixIssueButton,
            baseGridConstraints(
                row = 0,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_HORIZONTAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                indent = 0
            )
        )

        fixPanel.add(Spacer(),
            baseGridConstraints(
                row = 0,
                column = 1,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_HORIZONTAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_WANT_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK,
                indent = 0
            )
        )

        return panel
    }

    private fun getDetailedPathsPanel(): JPanel {
        val detailsPanel = JPanel()
        detailsPanel.layout = GridLayoutManager(2, 2, Insets(0, 0, 0, 0), -1, -1)

        detailsPanel.add(
            buildBoldTitleLabel("Detailed paths"),
            baseGridConstraints(
                row = 0
            )
        )

        detailsPanel.add(
            getInnerDetailedPathsPanel(3),
            baseGridConstraints(
                row = 1,
                indent = 0
            )
        )

        return detailsPanel
    }

    private fun getInnerDetailedPathsPanel(itemsToShow: Int? = null): JPanel {
        val detailsPanel = JPanel()
        detailsPanel.layout = GridLayoutManager(groupedVulns.size + 2, 2, Insets(0, 0, 0, 0), -1, -1)

        groupedVulns
            .take(itemsToShow ?: groupedVulns.size)
            .forEachIndexed { index, vuln ->
                val detailPanel = JPanel()
                detailPanel.layout = GridLayoutManager(2, 2, Insets(0, 0, 0, 0), -1, 0)
                detailPanel.add(buildTwoLabelsPanel("Introduced through:", vuln.from.joinToString(separator = " > ")),
                    baseGridConstraints(
                        row = 0,
                        HSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK,
                        VSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK,
                        indent = 0
                    )
                )

                val remediationText = if (vuln.upgradePath.isNotEmpty()) {
                    "Upgrade to " + vuln.upgradePath[1]
                } else ""
                detailPanel.add(
                    buildTwoLabelsPanel("Remediation:", remediationText),
                    baseGridConstraints(
                        row = 1,
                        indent = 0
                    )
                )

                detailsPanel.add(
                    detailPanel,
                    baseGridConstraints(
                        row = index + 1
                    )
                )
            }

        if (itemsToShow != null && itemsToShow < groupedVulns.size) {
            val showMoreLabel = LinkLabel.create("...and ${groupedVulns.size - itemsToShow} more") {
                detailsPanel.removeAll()
                detailsPanel.add(
                    getInnerDetailedPathsPanel(),
                    baseGridConstraints(
                        row = 0,
                        indent = 0
                    )
                )
                this.revalidate()
                this.repaint()
            }
            detailsPanel.add(
                showMoreLabel,
                baseGridConstraints(groupedVulns.size + 1)
            )
        }

        return detailsPanel
    }

    private fun getTitlePanel(): JPanel {
        val titlePanel = JPanel()
        titlePanel.layout = GridLayoutManager(11, 1, Insets(0, 0, 0, 0), -1, -1)

        val titleLabel = JLabel()
        io.snyk.plugin.ui.getFont(-1, 18, titleLabel.font)?.let { titleLabel.font = it }
        titleLabel.text = vulnerability.title

        titlePanel.add(titleLabel,
            baseGridConstraints(1)
        )

        val severityPanel = SeverityColorPanel(vulnerability.severity)
        severityPanel.layout = GridLayoutManager(2, 2, Insets(10, 10, 10, 10), -1, -1)

        titlePanel.add(severityPanel,
            baseGridConstraints(
                row = 0,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_BOTH,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                indent = 0
            )
        )

        val severityLabel = JLabel()

        val severityLabelFont: Font? = io.snyk.plugin.ui.getFont(-1, 14, severityLabel.font)

        if (severityLabelFont != null) {
            severityLabel.font = severityLabelFont
        }

        severityLabel.text = when (vulnerability.severity) {
            "high" -> "HIGH SEVERITY"
            "medium" -> "MEDIUM SEVERITY"
            "low" -> "LOW SEVERITY"
            else -> "UNKNOWN SEVERITY"
        }

        severityLabel.foreground = Color(-1)

        severityPanel.add(severityLabel,
            baseGridConstraints(
                row = 0,
                indent = 0
            )
        )

        severityPanel.add(Spacer(),
            baseGridConstraints(
                row = 0,
                column = 1,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_HORIZONTAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_WANT_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK,
                indent = 0
            )
        )

        severityPanel.add(Spacer(),
            baseGridConstraints(
                row = 1,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_VERTICAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK,
                VSizePolicy = GridConstraints.SIZEPOLICY_WANT_GROW,
                indent = 0
            )
        )

        return titlePanel
    }

    private fun getOverviewPanel(): JPanel {
        val overviewPanel = JPanel()
        overviewPanel.layout = GridLayoutManager(2, 1, Insets(0, 0, 0, 0), -1, 0)

        /*
                overviewPanel.add(buildBoldTitleLabel("Overview"),
                    baseGridConstraints(
                        row = 0,
                        indent = 0
                    )
                )
        */

        // don't remove that!
        // Some magic (side-effect?) happens when JBHtmlEditorKit() initializing
        // that make html tags like <em>, <p>, <ul> etc. be treated properly inside JEditorPane
        // PS occasionally found that when played with com.intellij.util.ui.HtmlPanel
        // PSS Good luck if you try to understand the reason of that magic (customStyleSheet?)... I gave up...
        JBHtmlEditorKit()

        val descriptionPane = JEditorPane(
            "text/html",
            "<html>" + getDescriptionAsHtml() + "</html>"
        ).apply {
            this.isEditable = false
            this.background = UIUtil.getPanelBackground()
            this.preferredSize = Dimension() // this is the key part for shrink/grow.

            // add a CSS rule to force body tags to use the default label font
            // instead of the value in javax.swing.text.html.default.csss
            val font = UIManager.getFont("Label.font")
            val bodyRule = "body { font-family: ${font.family}; font-size: ${font.size}pt; }"
            (this.document as HTMLDocument).styleSheet.addRule(bodyRule)

            // open clicked link in browser
            this.addHyperlinkListener {
                BrowserHyperlinkListener.INSTANCE.hyperlinkUpdate(it)
            }
        }

        overviewPanel.add(descriptionPane,
            baseGridConstraints(
                row = 1,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_BOTH,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_GROW or GridConstraints.SIZEPOLICY_CAN_SHRINK
            )
        )
        return overviewPanel
    }

    private fun getMoreInfoPanel(): JPanel {
        val moreInfoPanel = JPanel()
        moreInfoPanel.layout = GridLayoutManager(1, 2, Insets(0, 0, 0, 0), -1, -1)
        this.add(moreInfoPanel,
            baseGridConstraints(
                row = 9,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_BOTH,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW,
                indent = 0
            )
        )

        val moreInfoLabel = LinkLabel.create("More about this issue") {
            BrowserUtil.open("https://snyk.io/vuln/" + vulnerability.id)
        }

        moreInfoPanel.add(moreInfoLabel,
            baseGridConstraints(
                row = 0,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_HORIZONTAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW
            )
        )

        moreInfoPanel.add(Spacer(),
            baseGridConstraints(
                row = 0,
                column = 1,
                anchor = GridConstraints.ANCHOR_CENTER,
                fill = GridConstraints.FILL_HORIZONTAL,
                HSizePolicy = GridConstraints.SIZEPOLICY_WANT_GROW,
                VSizePolicy = GridConstraints.SIZEPOLICY_CAN_SHRINK,
                indent = 0
            )
        )

        return moreInfoPanel
    }

    private fun getDescriptionAsHtml(): String {
        val overviewMarkdownStr = vulnerability.description//getOverview()

        val parser = Parser.builder().build()
        val document = parser.parse(overviewMarkdownStr)

        val renderer = HtmlRenderer.builder().escapeHtml(true).build()

        return renderer.render(document)
    }
}
