package io.snyk.plugin.ui.toolwindow

import ai.deepcode.javaclient.core.SuggestionForFile
import com.intellij.openapi.util.Iconable
import com.intellij.psi.PsiFile
import com.intellij.ui.ColoredTreeCellRenderer
import com.intellij.util.ui.UIUtil
import io.snyk.plugin.cli.Vulnerability
import icons.SnykIcons
import io.snyk.plugin.snykcode.severityAsString
import io.snyk.plugin.ui.PackageManagerIconProvider
import javax.swing.Icon
import javax.swing.JTree
import javax.swing.tree.DefaultMutableTreeNode

class VulnerabilityTreeCellRenderer : ColoredTreeCellRenderer() {
    override fun customizeCellRenderer(
        tree: JTree,
        value: Any,
        selected: Boolean,
        expanded: Boolean,
        leaf: Boolean,
        row: Int,
        hasFocus: Boolean) {

        var nodeIcon: Icon? = null
        var text: String? = null
        when (value) {
            is VulnerabilityTreeNode -> {
                val vulnerability = value.userObject
                if (vulnerability is Vulnerability) {
                    nodeIcon = getSeverityIcon(vulnerability.severity)
                    text = vulnerability.getPackageNameTitle()
                }
            }
            is SuggestionTreeNode -> {
                val suggestion = value.userObject
                if (suggestion is SuggestionForFile) {
                    nodeIcon = getSeverityIcon(suggestion.severityAsString)
                    val range = suggestion.ranges.first()
                    text = "(${range.startRow}:${range.startCol}) ${suggestion.message}"
                }
            }
            is SnykCodeFileTreeNode -> {
                val file = value.userObject as PsiFile
                nodeIcon = file.getIcon(Iconable.ICON_FLAG_READ_STATUS)
                text = file.name
            }
            is FileTreeNode -> {
                val nodePair = value.userObject as Pair<String, String>
                nodeIcon = PackageManagerIconProvider.getIcon(nodePair.second.toLowerCase())
                text = nodePair.first
            }
            is DefaultMutableTreeNode -> {
                nodeIcon = SnykIcons.VULNERABILITY_16
                text = value.userObject.toString()
            }
        }
        icon = nodeIcon
        font = UIUtil.getTreeFont()
        text?.let { append(it) }
    }

    private fun getSeverityIcon(severity: String): Icon {
        return when (severity) {
            "high" -> SnykIcons.HIGH_SEVERITY
            "medium" -> SnykIcons.MEDIUM_SEVERITY
            "low" -> SnykIcons.LOW_SEVERITY
            else -> SnykIcons.VULNERABILITY_24
        }
    }
}
