package io.snyk.plugin.ui.toolwindow

import ai.deepcode.javaclient.core.SuggestionForFile
import com.intellij.openapi.util.Iconable
import com.intellij.psi.PsiFile
import com.intellij.ui.ColoredTreeCellRenderer
import com.intellij.ui.SimpleTextAttributes
import com.intellij.util.ui.UIUtil
import icons.SnykIcons
import io.snyk.plugin.cli.Vulnerability
import io.snyk.plugin.getApplicationSettingsStateService
import io.snyk.plugin.snykcode.severityAsString
import io.snyk.plugin.ui.PackageManagerIconProvider
import javax.swing.Icon
import javax.swing.JTree
import javax.swing.tree.DefaultMutableTreeNode

class VulnerabilityTreeCellRenderer : ColoredTreeCellRenderer() {
    override fun customizeCellRenderer(
        tree: JTree,
        value: Any,
        selected: Boolean,
        expanded: Boolean,
        leaf: Boolean,
        row: Int,
        hasFocus: Boolean
    ) {

        var nodeIcon: Icon? = null
        var text: String? = null
        var attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES
        when (value) {
            is VulnerabilityTreeNode -> {
                val vulnerability = value.userObject
                if (vulnerability is Vulnerability) {
                    nodeIcon = getSeverityIcon(vulnerability.severity)
                    text = vulnerability.getPackageNameTitle()
                }
            }
            is FileTreeNode -> {
                val nodePair = value.userObject as Pair<String, String>
                nodeIcon = PackageManagerIconProvider.getIcon(nodePair.second.toLowerCase())
                text = nodePair.first
            }
            is SuggestionTreeNode -> {
                val suggestion = value.userObject
                if (suggestion is SuggestionForFile) {
                    nodeIcon = getSeverityIcon(suggestion.severityAsString)
                    val range = suggestion.ranges.first()
                    text = "line ${range.startRow}: ${
                        if (suggestion.title.isNullOrEmpty()) suggestion.message else suggestion.title
                    }"
                }
            }
            is SnykCodeFileTreeNode -> {
                val file = value.userObject as PsiFile
                nodeIcon = file.getIcon(Iconable.ICON_FLAG_READ_STATUS)
                text = file.name
            }
            is DefaultMutableTreeNode -> {
                nodeIcon = when (value) {
                    is RootCliTreeNode -> SnykIcons.OPEN_SOURCE_SECURITY
                    is RootSecurityIssuesTreeNode -> SnykIcons.SNYK_CODE
                    is RootQualityIssuesTreeNode -> SnykIcons.SNYK_CODE
                    else -> SnykIcons.VULNERABILITY_16
                }
                text = value.userObject.toString()
                val settings = getApplicationSettingsStateService()
                if ((value is RootCliTreeNode && !settings.cliScanEnable) ||
                    (value is RootSecurityIssuesTreeNode && !settings.snykCodeScanEnable) ||
                    (value is RootQualityIssuesTreeNode && !settings.snykCodeQualityIssuesScanEnable)
                ) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    text += " (disabled)"
                } else {
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }

            }
        }
        icon = nodeIcon
        font = UIUtil.getTreeFont()
        text?.let { append(it, attributes) }
    }

    private fun getSeverityIcon(severity: String): Icon {
        return when (severity) {
            "high" -> SnykIcons.HIGH_SEVERITY
            "medium" -> SnykIcons.MEDIUM_SEVERITY
            "low" -> SnykIcons.LOW_SEVERITY
            else -> SnykIcons.VULNERABILITY_24
        }
    }
}
