package io.snyk.plugin.ui.toolwindow

import com.google.gson.Gson
import com.intellij.ui.components.labels.LinkLabel
import java.awt.Container
import java.io.FileReader
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import org.junit.Before
import org.junit.Test
import snyk.oss.Vulnerability
import javax.swing.JLabel

class VulnerabilityDescriptionPanelTest {
    private lateinit var cut: VulnerabilityDescriptionPanel
    private lateinit var vulnerability: Vulnerability

    @Before
    fun setup() {
        val gson: Gson = Gson()
        val json = FileReader("src/test/resources/npm-test-vulnerability.json")
        vulnerability = gson.fromJson(json, Vulnerability::class.java)
        cut = VulnerabilityDescriptionPanel(listOf(vulnerability))
    }

    @Test
    fun npmDependencyIntroducedFromLabelShouldBeLinkLabel() {
        val introducingDependency = vulnerability.from[1]
        val actual = getJLabelByText(cut, introducingDependency)
        assertNotNull(actual)
        assertEquals(LinkLabel::class, actual::class)
    }

    @Test
    fun nonNpmDependencyIntroducedFromLabelShouldNotBeLinkLabel() {
        val introducingDependency = vulnerability.from[1]
        vulnerability.packageManager = "not npm!"
        cut = VulnerabilityDescriptionPanel(listOf(vulnerability))
        val actual = getJLabelByText(cut, introducingDependency)
        assertNotNull(actual)
        assertEquals(JLabel::class, actual::class)
    }

    @Test
    fun cwePanelShouldDisplayLinkToCVE() {
        val cwes = vulnerability.identifiers!!.CWE
        cwes.forEach { cwe ->
            val actual = getJLabelByText(cut, cwe)
            assertNotNull(actual, "Expected to find label for $cwe, but was null")
        }
    }

    private fun getJLabelByText(parent: Container, text: String): JLabel? {
        val components = parent.components
        var found: JLabel? = null
        for (component in components) {
            if (component is JLabel && text == component.text) {
                found = component
            } else if (component is Container) {
                found = getJLabelByText(component, text)
            }
            if (found != null) {
                break
            }
        }
        return found
    }
}
